"use client"
import { Grid } from 'antd';
import { useState, createContext, useEffect } from 'react';
// import { Inter } from 'next/font/google'
import { Poppins } from 'next/font/google'
import { ThemeProvider } from '@emotion/react';
import { GoogleOAuthProvider } from '@react-oauth/google';
import LayoutMain from '../components/Layout/index'
// import { CookiesProvider } from 'react-cookie';
// import 'antd/dist/antd.css';
import '../styles/global.css'
import ScreenSizeDisplay from '@/assets/css/screenSize';
import StyledComponentsRegistry from '@/lib/AntdStyleRegistry';
import { CHECK_USER_STATUS } from '@/Services/frontend';


const { useBreakpoint } = Grid;
const inter = Poppins({  weight: '400', subsets: ['latin'],  display: 'swap', })

const metadata = {
  title: 'Bookablebiz',
  description: 'Generated by create next app',
}

export const AuthContext = createContext();

export default function RootLayout({ children }) {
  
  const [ formRoute, setFormRoute] = useState();
  const [ vendorEmail, setVendorEmail ] = useState();
  const [ paidPlans, setPaidPlans ] = useState("mypaidPlans");
  const [ userDetails, setUserDetails ] = useState();

  const screens = useBreakpoint();
  const screenSizes = Object.entries(screens)
    .filter(screen => !!screen[1])
    .map(scr => scr[0]);
  
  const theme = { screen: screenSizes[screenSizes.length - 1] };

  const clientId = "742710946298-301ocvdbao61aj0vl90tqvkr4isnkknj.apps.googleusercontent.com";
  const tempClientId =  process.env.GOOGLE_CLIENT_ID;

  const CHECK_USER_STATUS_API = async () => {
       if(localStorage.getItem('userId')){
        const REQUEST_DATA = new FormData();
        REQUEST_DATA.append('user_id', localStorage.getItem('userId'));
        REQUEST_DATA.append('token', localStorage.getItem('token'));
        const result = await CHECK_USER_STATUS(REQUEST_DATA);
        if(!result?.data?.status){
           localStorage.clear();
           window.location.reload();
        }
       }
  }
  useEffect(() => {
    CHECK_USER_STATUS_API();
  },[])
  return (
    <html lang="en">
      <body className={inter.className} >
      <GoogleOAuthProvider clientId={clientId}>
        <AuthContext.Provider value={{ paidPlans, setPaidPlans, userDetails, setUserDetails }} >
          <StyledComponentsRegistry>
            <ThemeProvider theme={theme}>
              <LayoutMain>
                {children} 
              </LayoutMain>
              {/* {process.env.NEXT_PUBLIC_ENVIRONMENT === 'local' ? ( */}
                  <ScreenSizeDisplay />
                {/* ) : null} */}
            </ThemeProvider>
          </StyledComponentsRegistry>  
        </AuthContext.Provider>
      </GoogleOAuthProvider>
      </body>
    </html>
  )
}
